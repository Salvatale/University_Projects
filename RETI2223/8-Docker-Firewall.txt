Protezione dell'host nginx2:

    dobbiamo bloccare tutte le connessioni entranti tranne quelle ssh e http.

    Notiamo che se eseguiamo questo comando allora possiamo vedere che non esistono
    ancora regole.

    root@c2fe5c2edb79:/# iptables-legacy -nvL
    Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
    pkts bytes target     prot opt in     out     source               destination

    Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
    pkts bytes target     prot opt in     out     source               destination

    Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
    pkts bytes target     prot opt in     out     source               destination

    blocchiamo le connnessioni tranne quella ssh, http e manteniamo attive le connessioni
    UDP/53 per il servizio DNS.

        root@c2fe5c2edb79:/# iptables-legacy --append INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT
        root@c2fe5c2edb79:/# iptables-legacy --append INPUT --proto tcp --dport 22 -j ACCEPT
        root@c2fe5c2edb79:/# iptables-legacy --append INPUT --proto tcp --dport 80 -j ACCEPT
        root@c2fe5c2edb79:/# iptables-legacy --append INPUT -p udp --sport 53 -j ACCEPT
        root@c2fe5c2edb79:/# iptables-legacy -nvL
        Chain INPUT (policy DROP 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination
            0     0 ACCEPT     6    --  *      *       0.0.0.0/0            0.0.0.0/0            state ESTABLISHED
            0     0 ACCEPT     6    --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22
            0     0 ACCEPT     6    --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80
            0     0 ACCEPT     17   --  *      *       0.0.0.0/0            0.0.0.0/0            udp spt:53

        Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination

        Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination

    Possiamo notare che adesso se riusciamo ad eseguire il comando ping o traceroute
    da nginx3 o nginx4 con destinazione 172.17.0.2

        root@392e6c9825ba:/# ping 172.17.0.2
        PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
        ^C
        --- 172.17.0.2 ping statistics ---
        3 packets transmitted, 0 received, 100% packet loss, time 2049ms

        root@392e6c9825ba:/# traceroute 172.17.0.2
        traceroute to 172.17.0.2 (172.17.0.2), 30 hops max, 60 byte packets
        1  * * *
        2  * * *
        3  * * *
        4  * * *
        5  * * *
        6  * * *
        7  * * *
        8  * * *
        9  * * *
        10  * * *
        11  * * *
        12  * * *
        13  * * *
        14  * * *
        15  * * *
        16  * * *
        17  * * *
        18  * * *
        19  * * *
        20  * * *
        21  * * *
        22  * * *
        23  * * *
        24  * * *
        25  * * *
        26  * * *
        27  * * *
        28  * * *
        29  * * *
        30  * * *

    Inseriamo le regole per permettere il ping e quindi ricevere echo-request e 
    rispondere con echo-reply e visualizziamo la tabella finale dell'host:

        root@c2fe5c2edb79:/# iptables-legacy --append INPUT -p icmp --icmp-type echo-request -j ACCEPT
        root@c2fe5c2edb79:/# iptables-legacy --append INPUT -p icmp --icmp-type echo-reply -j ACCEPT
        root@c2fe5c2edb79:/# iptables-legacy -nvL
        Chain INPUT (policy DROP 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination
            0     0 ACCEPT     6    --  *      *       0.0.0.0/0            0.0.0.0/0            state ESTABLISHED
            0     0 ACCEPT     6    --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22
            0     0 ACCEPT     6    --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80
            0     0 ACCEPT     17   --  *      *       0.0.0.0/0            0.0.0.0/0            udp spt:53
            0     0 ACCEPT     1    --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 8
            0     0 ACCEPT     1    --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 0

        Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination

        Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination

    Adesso se possiamo verificare che il ping o traceroute funzioni:

        root@392e6c9825ba:/# ping 172.17.0.2
        PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
        64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.185 ms
        64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.082 ms
        64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.077 ms
        ^C
        --- 172.17.0.2 ping statistics ---
        3 packets transmitted, 3 received, 0% packet loss, time 2045ms
        rtt min/avg/max/mdev = 0.077/0.114/0.185/0.049 ms

    Salviamo le regole in un file tramite il comando:

        root@c2fe5c2edb79:/# iptables-legacy-save > /etc/iptables.conf

    
PROTEZIONE DELLA LAN 192.168.0.0/24

    Dobbiamo impostare il firewall su nginx3 perchè funge da gateway per i 
    pacchetti che nginx2 manda alla rete 192.168.0.0/24.

    -Accettare il traffico in uscita che parte dalla rete protetta:
        
        iptables-legacy --append FORWARD -s 192.168.0.0/24 -i eth0 -j ACCEPT
    
    -Accettare il traffico dovuto a connessioni ESTABLISHED

        iptables-legacy --append FORWARD -p ALL -m state --state ESTABLISHED -j ACCEPT

    -Accettare connessioni SSH ed HTTP ed connessioni UDP/53:

        iptables-legacy --append FORWARD -p tcp -d 192.168.0.4 --dport 22 -j ACCEPT
        iptables-legacy --append FORWARD -p tcp -d 192.168.0.4 --dport 80 -j ACCEPT
        iptables-legacy --append FORWARD -p udp --dport 53 -j ACCEPT

    -Accettare i pacchetti echo-request ed echo-reply dalla rete verso fuori

        iptables-legacy --append FORWARD -p icmp --icmp-type echo-request -s 192.168.0.0/24 -j ACCEPT
        iptables-legacy --append FORWARD -p icmp --icmp-type echo-reply -d 192.168.0.0/24 -j ACCEPT

    Otteniamo la tabella delle regole finale:

        root@392e6c9825ba:/# iptables-legacy -nvL
        Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination

        Chain FORWARD (policy DROP 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination
            5   420 ACCEPT     0    --  eth1   *       192.168.0.0/24       0.0.0.0/0
            3   252 ACCEPT     0    --  *      *       0.0.0.0/0            0.0.0.0/0            state ESTABLISHED
            0     0 ACCEPT     6    --  *      *       0.0.0.0/0            192.168.0.4          tcp dpt:22
            0     0 ACCEPT     6    --  *      *       0.0.0.0/0            192.168.0.4          tcp dpt:80
            0     0 ACCEPT     17   --  *      *       0.0.0.0/0            0.0.0.0/0            udp dpt:53
            0     0 ACCEPT     1    --  *      *       192.168.0.0/24       0.0.0.0/0            icmptype 8
            0     0 ACCEPT     1    --  *      *       0.0.0.0/0            192.168.0.0/24       icmptype 0

        Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
        pkts bytes target     prot opt in     out     source               destination


    Quindi notiamo che se eseguiamo ping verso 192.168.0.4 da nginx2 allora non funziona

        root@c2fe5c2edb79:/# ping 192.168.0.4
        PING 192.168.0.4 (192.168.0.4) 56(84) bytes of data.
        ^C^C
        --- 192.168.0.4 ping statistics ---
        40 packets transmitted, 0 received, 100% packet loss, time 39919ms

    mentre invece le connessioni HTTP ed SSH funzionano perfettamente da nginx2.

    Il ping invece da nginx4 verso ngin2 funziona perfettamente

        root@6b6fc14b99b4:/# ping -c 1 172.17.0.2
        PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
        64 bytes from 172.17.0.2: icmp_seq=1 ttl=63 time=0.110 ms

        --- 172.17.0.2 ping statistics ---
        1 packets transmitted, 1 received, 0% packet loss, time 0ms
        rtt min/avg/max/mdev = 0.110/0.110/0.110/0.000 ms
    
    dato che non c'è NAT sulla rete protetta allora su nginx4 il servizio DNS 
    non funziona:

        root@6b6fc14b99b4:/# dig www.unipr.it
        ;; communications error to 127.0.0.11#53: timed out
        ;; communications error to 127.0.0.11#53: timed out

    Mentre invece su nginx3 che possiede anche il bridge di default allora il
    servizio DNS funziona:

        root@392e6c9825ba:/# dig www.unipr.it

        ; <<>> DiG 9.18.12-1-Debian <<>> www.unipr.it
        ;; global options: +cmd
        ;; Got answer:
        ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 49957
        ;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 1

        ;; OPT PSEUDOSECTION:
        ; EDNS: version: 0, flags:; udp: 4000
        ;; QUESTION SECTION:
        ;www.unipr.it.                  IN      A

        ;; ANSWER SECTION:
        www.unipr.it.           3496    IN      CNAME   d3arihkiz2xd9u.cloudfront.net.
        d3arihkiz2xd9u.cloudfront.net. 60 IN    A       108.138.189.75
        d3arihkiz2xd9u.cloudfront.net. 60 IN    A       108.138.189.61
        d3arihkiz2xd9u.cloudfront.net. 60 IN    A       108.138.189.65
        d3arihkiz2xd9u.cloudfront.net. 60 IN    A       108.138.189.24

        ;; Query time: 56 msec
        ;; SERVER: 127.0.0.11#53(127.0.0.11) (UDP)
        ;; WHEN: Sat Jun 24 17:32:08 UTC 2023
        ;; MSG SIZE  rcvd: 148


